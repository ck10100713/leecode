Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example 1:

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

Example 2:

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true

Example 3:

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        # Count number of letters in board and store it in a dictionary
        boardDic = defaultdict(int)
        for i in range(len(board)):
            for j in range(len(board[0])):
                boardDic[board[i][j]] += 1

        # Count number of letters in word
        # Check if board has all the letters in the word and they are atleast same count from word
        wordDic = Counter(word)
        for c in wordDic:
            if c not in boardDic or boardDic[c] < wordDic[c]:
                return False

        # Traverse through board and if word[0] == board[i][j], call the DFS function
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == word[0]:
                    if self.dfs(i, j, 0, board, word):
                        return True

        return False

    def dfs(self, i, j, k, board, word):
        # Recursion will return False if (i,j) is out of bounds or board[i][j] != word[k] which is current letter we need
        if i < 0 or j < 0 or i >= len(board) or j >= len(board[0]) or \
        k >= len(word) or word[k] != board[i][j]:
            return False

        # If this statement is true then it means we have reach the last letter in the word so we can return True
        if k == len(word) - 1:
            return True

        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]

        for x, y in directions:
            # Since we can't use the same letter twice, I'm changing current board[i][j] to -1 before traversing further
            tmp = board[i][j]
            board[i][j] = -1

            # If dfs returns True then return True so there will be no further dfs
            if self.dfs(i + x, j + y, k + 1, board, word):
                return True

            board[i][j] = tmp

worth way

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:

        def dfs(board, word, x, y, target, path):
            if len(word) == target + 1:
                return True
            # up
            if x-1 >= 0:
                if board[x-1][y] == word[target+1] and [x-1,y] not in path:
                    path.append([x-1,y])
                    if dfs(board, word, x-1, y, target+1, path):
                        return True
            # down
            if x+1 <n:
                if board[x+1][y] == word[target+1] and [x+1,y] not in path:
                    path.append([x+1,y])
                    if dfs(board, word, x+1, y, target+1, path):
                        return True
            # left
            if y-1 >= 0:
                if board[x][y-1] == word[target+1] and [x,y-1] not in path:
                    path.append([x,y-1])
                    if dfs(board, word, x, y-1, target+1, path):
                        return True
            # right
            if y+1 < m:
                if board[x][y+1] == word[target+1] and [x,y+1] not in path:
                    path.append([x,y+1])
                    if dfs(board, word, x, y+1, target+1, path):
                        return True
            path.pop()
            return False

        n = len(board)
        m = len(board[0])
        path = []
        target = 0
        for i in range(n):
            for j in range(m):
                target = 0
                if board[i][j] == word[target]:
                    path.append([i,j])
                    if dfs(board,word,i,j,target,path):
                        return True
        return False