Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

 

Example 1:


Input: p = [1,2,3], q = [1,2,3]
Output: true
Example 2:


Input: p = [1,2], q = [1,null,2]
Output: false
Example 3:


Input: p = [1,2,1], q = [1,1,2]
Output: false

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        path = []
        if (p and not q) or (not p and q):
            return False
        elif p:
            path = [(p,q)]
    
        while path:
            a,b = path.pop()
            if a.val != b.val:
                return False
            if (a.left and not b.left) or (not a.left and b.left):
                return False
            elif a.left:
                path.append((a.left,b.left))
            if (a.right and not b.right) or (not a.right and b.right):
                return False
            elif a.right:
                path.append((a.right,b.right))
        return True