Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:

Players take turns placing characters into empty squares ' '.
The first player A always places 'X' characters, while the second player B always places 'O' characters.
'X' and 'O' characters are always placed into empty squares, never on filled ones.
The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
The game also ends if all squares are non-empty.
No more moves can be played if the game is over.
Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return "Draw". If there are still movements to play return "Pending".

You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.

 

Example 1:


Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
Output: "A"
Explanation: A wins, they always play first.
Example 2:


Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
Output: "B"
Explanation: B wins.
Example 3:


Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
Output: "Draw"
Explanation: The game ends in a draw since there are no moves to make.

class Solution:
    def tictactoe(self, moves: List[List[int]]) -> str:
        n = 3

        # Initialize a nxn grid with empty spaces
        grid = [['' for _ in range(n)] for _ in range(n)]
        def check_winner():
            # Check rows and columns
            for i in range(3):
                if grid[i][0] == grid[i][1] == grid[i][2] != '':
                    return grid[i][0]
                if grid[0][i] == grid[1][i] == grid[2][i] != '':
                    return grid[0][i]
            
            # Check diagonals
            if grid[0][0] == grid[1][1] == grid[2][2] != '':
                return grid[0][0]
            if grid[0][2] == grid[1][1] == grid[2][0] != '':
                return grid[0][2]

            # Check if all squares are filled
            if all(grid[i][j] != '' for i in range(3) for j in range(3)):
                return 'Draw'

            return 'Pending'
        for i, (row, col) in enumerate(moves):
            player = 'A' if i % 2 == 0 else 'B'
            grid[row][col] = player
            winner = check_winner()
            if winner != 'Pending':
                return winner
        
        return 'Pending'