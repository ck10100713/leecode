In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.

Return the maximum amount of gold you can collect under the conditions:

Every time you are located in a cell you will collect all the gold in that cell.
From your position, you can walk one step to the left, right, up, or down.
You can't visit the same cell more than once.
Never visit a cell with 0 gold.
You can start and stop collecting gold from any position in the grid that has some gold.
 

Example 1:

Input: grid = [[0,6,0],[5,8,7],[0,9,0]]
Output: 24
Explanation:
[[0,6,0],
 [5,8,7],
 [0,9,0]]
Path to get the maximum gold, 9 -> 8 -> 7.
Example 2:

Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
Output: 28
Explanation:
[[1,0,7],
 [2,0,6],
 [3,4,5],
 [0,3,0],
 [9,0,20]]
Path to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.

#dfs
class Solution:
    def getMaximumGold(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        visited = set()

        def inBound(row, col):
            return 0 <= row < n and 0 <= col < m

        def dfs(row, col):
            if not inBound(row, col) or (row, col) in visited or grid[row][col] == 0:
                return 0

            visited.add((row, col))

            left = dfs(row, col - 1)
            right = dfs(row, col + 1)
            up = dfs(row - 1, col)
            down = dfs(row + 1, col)

            visited.remove((row, col))

            return grid[row][col] + max(left, right, up, down)

        maxGold = 0

        for i in range(n):
            for j in range(m):
                if grid[i][j] and (i, j) not in visited:
                    maxGold = max(maxGold, dfs(i, j))

        return maxGold

#speed way
class Cell:
    def __init__(self, id: int, row: int, col: int, gold: int):
        self.id = id
        self.row = row
        self.col = col
        self.gold = gold
        self.neighbors = set()
    def __str__(self):
        return "{} - {}".format(self.id, self.gold)
    def __repr__(self):
        return "[{},{}] - {}".format(self.row, self.col, self.gold)

class Cluster:
    def __init__(self, id):
        self.id = id
        self.cells = set()
        self.total = 0
    def __repr__(self):
        return "id={}, gold={}, {}".format(self.id, self.total, self.cells)

class Solution:
    def getMaximumGold(self, grid: List[List[int]]) -> int:
        index = 0
        cells = dict()

        m = len(grid)
        n = len(grid[0])
        for i in range(m):
            for j in range(n):
                if grid[i][j] > 0:
                    index += 1
                    newCell = Cell(index, i, j, grid[i][j])
                    for c in cells.values():
                        if c.row == i and (c.col == j + 1 or c.col == j - 1) or \
                                c.col == j and (c.row == i + 1 or c.row == i - 1):
                            newCell.neighbors.add(c)
                            c.neighbors.add(newCell)
                    cells[index] = newCell

        # print(cells)
        self.clusters = dict()
        self.buildClusters(cells, index + 1)
        # print(self.clusters)
        self.result = 0
        self.path = deque()
        # for cell in cells.values():
        #     self.visit(cell, 0)

        sortedClusters = [c for c in self.clusters.values()]
        sortedClusters.sort(key=lambda cl: cl.total, reverse=True)
        # print("Sorted", sortedClusters)
        for cluster in self.clusters.values():
            self.visitCluster(cluster)

        return self.result


    def buildClusters(self, cells: dict, n: int):
        assigned = [0] * n
        for k in cells:
            cell = cells[k]
            self.tryToAddCellToCluster(cell, assigned)


    def tryToAddCellToCluster(self, cell, assigned):
        if assigned[cell.id] == 0:
            for neighbor in cell.neighbors:
                if assigned[neighbor.id] > 0:
                    cluster = self.clusters[assigned[neighbor.id]]
                    self.addCellToCluster(cluster, cell, assigned)
                    break
        if assigned[cell.id] == 0:
            index = len(self.clusters) + 1
            cluster = Cluster(index)
            self.clusters[index] = cluster
            self.addCellToCluster(cluster, cell, assigned)
        for neighbor in cell.neighbors:
            if assigned[neighbor.id] == 0:
                self.tryToAddCellToCluster(neighbor, assigned)

    def addCellToCluster(self, cluster, cell, assigned):
        cluster.cells.add(cell)
        cluster.total += cell.gold
        assigned[cell.id] = cluster.id

    def visitCluster(self, cluster: Cluster):
        if self.result >= cluster.total:
            return

        if len(cluster.cells) <= 3:
            self.result = cluster.total
            return

        self.path.clear()
        for cell in cluster.cells:
            self.visitCell(cell, 0, cluster.total)

    def visitCell(self, cell: Cell, current: int, ceiling: int):
        # print(cellId, self.path)
        self.path.append(cell.id)
        current += cell.gold
        if current > self.result:
            self.result = current
        if self.result < ceiling:
            toVisit = [c for c in cell.neighbors if c.id not in self.path]
            for neighbor in toVisit:
                self.visitCell(neighbor, current, ceiling)

        self.path.pop()