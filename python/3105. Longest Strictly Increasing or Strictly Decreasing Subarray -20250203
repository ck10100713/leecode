You are given an array of integers nums. Return the length of the longest 
subarray
 of nums which is either 
strictly increasing
 or 
strictly decreasing
.

 

Example 1:

Input: nums = [1,4,3,3,2]

Output: 2

Explanation:

The strictly increasing subarrays of nums are [1], [2], [3], [3], [4], and [1,4].

The strictly decreasing subarrays of nums are [1], [2], [3], [3], [4], [3,2], and [4,3].

Hence, we return 2.

Example 2:

Input: nums = [3,3,3,3]

Output: 1

Explanation:

The strictly increasing subarrays of nums are [3], [3], [3], and [3].

The strictly decreasing subarrays of nums are [3], [3], [3], and [3].

Hence, we return 1.

Example 3:

Input: nums = [3,2,1]

Output: 3

Explanation:

The strictly increasing subarrays of nums are [3], [2], and [1].

The strictly decreasing subarrays of nums are [3], [2], [1], [3,2], [2,1], and [3,2,1].

Hence, we return 3.

 

Constraints:

1 <= nums.length <= 50
1 <= nums[i] <= 50

class Solution:
    def longestMonotonicSubarray(self, nums: List[int]) -> int:
        in_count = 0
        de_count = 0
        ans = 0
        for num in nums:
            if in_count == 0:
                in_count += 1
                de_count += 1
            else:
                if num > init:
                    in_count += 1
                    de_count = 1
                elif num < init:
                    de_count += 1
                    in_count = 1
                else:
                    de_count = 1
                    in_count = 1
            init = num
            ans = max(ans, de_count, in_count)
        return ans