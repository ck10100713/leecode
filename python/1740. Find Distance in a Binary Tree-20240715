Given the root of a binary tree and two integers p and q, return the distance between the nodes of value p and value q in the tree.

The distance between two nodes is the number of edges on the path from one to the other.

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 0
Output: 3
Explanation: There are 3 edges between 5 and 0: 5-3-1-0.
Example 2:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 7
Output: 2
Explanation: There are 2 edges between 5 and 7: 5-2-7.
Example 3:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 5
Output: 0
Explanation: The distance between a node and itself is 0.

class Solution:
    def findDistance(self, root: TreeNode, p: int, q: int) -> int:
        if p == q: return 0 # edge case 
        
        def fn(node): 
            """Return distance of p and q."""
            if not node: return 0 # boundary condition 
            left, right = fn(node.left), fn(node.right)

            # already done
            if left > 0 or right > 0:
                return max(left, right)
            
            # two side target
            if left < 0 and right < 0:
                return -left - right

            # leaf one side target
            if left < 0 or right < 0:
                # bingo get answer
                if node.val in (p, q):
                    return -min(left, right)
                # conti add layer
                else:
                    return min(left, right)-1

            # find target
            if node.val in (p, q):
                return -1
            else:
                return 0
        return fn(root)